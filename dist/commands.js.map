{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/./src/commands/commands.ts","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","Office.onReady(() => {\n  console.log(\"Office JS ready!\");\n\n  Office.actions.associate(\"emptyTextBoxes\", emptyTextBoxes);\n  Office.actions.associate(\"emptyEntireSlide\", emptyEntireSlide);\n  Office.actions.associate(\"equalizeSize\", equalizeSize);\n  Office.actions.associate(\"equalizeHeight\", equalizeHeight);\n  Office.actions.associate(\"equalizeWidth\", equalizeWidth);\n  Office.actions.associate(\"stackHorizontally\", stackHorizontally);\n  Office.actions.associate(\"stackVertically\", stackVertically);\n  Office.actions.associate(\"invertPositions\", invertPositions);\n  Office.actions.associate(\"removeMargins\", removeMargins);\n  Office.actions.associate(\"toggleTextWrap\", toggleTextWrap);\n  Office.actions.associate(\"copyPosition\", copyPosition);\n  Office.actions.associate(\"pastePosition\", pastePosition);\n  Office.actions.associate(\"copyDimensions\", copyDimensions);\n  Office.actions.associate(\"pasteDimensions\", pasteDimensions);\n  Office.actions.associate(\"autoFitShapeToText\", autoFitShapeToText);\n  Office.actions.associate(\"autoFitTextToShape\", autoFitTextToShape);\n  Office.actions.associate(\"insertHarvey0\", insertHarvey0);\n  Office.actions.associate(\"insertHarvey25\", insertHarvey25);\n  Office.actions.associate(\"insertHarvey50r\", insertHarvey50r);\n  Office.actions.associate(\"insertHarvey50l\", insertHarvey50l);\n  Office.actions.associate(\"insertHarvey75\", insertHarvey75);\n  Office.actions.associate(\"insertHarvey100\", insertHarvey100);\n  Office.actions.associate(\"insertGreenLight\", insertGreenLight);\n  Office.actions.associate(\"insertOrangeLight\", insertOrangeLight);\n  Office.actions.associate(\"insertRedLight\", insertRedLight);\n  Office.actions.associate(\"insertUpArrow\", insertUpArrow);\n  Office.actions.associate(\"insertDownArrow\", insertDownArrow);\n  Office.actions.associate(\"insertEqualsSign\", insertEqualsSign);\n  Office.actions.associate(\"createPostItNote\", createPostItNote);\n  Office.actions.associate(\"insertFootnote\", insertFootnote);\n  Office.actions.associate(\"createPreliminaryStamp\", createPreliminaryStamp);\n  Office.actions.associate(\"createExampleStamp\", createExampleStamp);\n  Office.actions.associate(\"createExecSumStamp\", createExecSumStamp);\n  Office.actions.associate(\"createDraftStamp\", createDraftStamp);\n});\n\nexport async function emptyTextBoxes(event: Office.AddinCommands.Event) {\n  console.log(\"emptyTextBoxes button clicked!\");\n\n  try {\n    await PowerPoint.run(async (context) => {\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items/textFrame/hasText\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected.\");\n        event.completed();\n        return;\n      }\n\n      selectedShapes.items.forEach((shape, i) => {\n        if (shape.textFrame && shape.textFrame.hasText) {\n          console.log(`Clearing text in selected shape #${i}`);\n          shape.textFrame.textRange.text = \"\";\n        }\n      });\n\n      await context.sync();\n      console.log(\"Text cleared from selected shapes.\");\n    });\n  } catch (error) {\n    console.error(\"Error in emptyTextBoxes:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function emptyEntireSlide(event: Office.AddinCommands.Event) {\n  console.log(\"emptyEntireSlide button clicked!\");\n\n  try {\n    await PowerPoint.run(async (context) => {\n      const selectedSlides = context.presentation.getSelectedSlides();\n      selectedSlides.load(\"items\");\n      await context.sync();\n\n      if (selectedSlides.items.length === 0) {\n        console.log(\"No slide selected.\");\n        event.completed();\n        return;\n      }\n\n      const slide = selectedSlides.items[0];\n      const shapes = slide.shapes;\n      shapes.load(\"items/textFrame/hasText\");\n      await context.sync();\n\n      shapes.items.forEach((shape, i) => {\n        if (shape.textFrame && shape.textFrame.hasText) {\n          console.log(`Clearing shape #${i}`);\n          shape.textFrame.textRange.text = \"\";\n        }\n      });\n\n      await context.sync();\n      console.log(\"Text cleared from shapes on selected slide.\");\n    });\n  } catch (error) {\n    console.error(\"Error in emptyEntireSlide:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function equalizeSize(event: Office.AddinCommands.Event) {\n  console.log(\"Equalize Size button clicked!\");\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Get the selected shapes on the slide\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected.\");\n        event.completed();\n        return;\n      }\n\n      // Use the first shape as reference\n      const referenceShape = selectedShapes.items[0];\n      referenceShape.load([\"width\", \"height\"]);\n      await context.sync();\n\n      const refWidth = referenceShape.width;\n      const refHeight = referenceShape.height;\n      console.log(`Reference dimensions - Width: ${refWidth}, Height: ${refHeight}`);\n\n      // Loop through the rest of the selected shapes and apply the same size\n      for (let i = 1; i < selectedShapes.items.length; i++) {\n        const shape = selectedShapes.items[i];\n        shape.width = refWidth;\n        shape.height = refHeight;\n      }\n\n      await context.sync();\n      console.log(\"All selected shapes have been resized to match the first shape.\");\n    });\n  } catch (error) {\n    console.error(\"Error in equalizeSize:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function equalizeHeight(event: Office.AddinCommands.Event) {\n  console.log(\"Equalize Height button clicked!\");\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Get the selected shapes on the slide\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected.\");\n        event.completed();\n        return;\n      }\n\n      // Use the first shape as reference\n      const referenceShape = selectedShapes.items[0];\n      referenceShape.load([\"height\"]);\n      await context.sync();\n\n      const refHeight = referenceShape.height;\n      console.log(`Reference dimensions Height: ${refHeight}`);\n\n      // Loop through the rest of the selected shapes and apply the same height\n      for (let i = 1; i < selectedShapes.items.length; i++) {\n        const shape = selectedShapes.items[i];\n        shape.height = refHeight;\n      }\n\n      await context.sync();\n      console.log(\"All selected shapes have been resized to match the first shape's height.\");\n    });\n  } catch (error) {\n    console.error(\"Error in equalizeHeight:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function equalizeWidth(event: Office.AddinCommands.Event) {\n  console.log(\"Equalize Size button clicked!\");\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Get the selected shapes on the slide\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected.\");\n        event.completed();\n        return;\n      }\n\n      // Use the first shape as reference\n      const referenceShape = selectedShapes.items[0];\n      referenceShape.load([\"width\"]);\n      await context.sync();\n\n      const refWidth = referenceShape.width;\n      console.log(`Reference dimensions - Width: ${refWidth}`);\n\n      // Loop through the rest of the selected shapes and apply the same size\n      for (let i = 1; i < selectedShapes.items.length; i++) {\n        const shape = selectedShapes.items[i];\n        shape.width = refWidth;\n      }\n\n      await context.sync();\n      console.log(\"All selected shapes have been resized to match the first shape's width.\");\n    });\n  } catch (error) {\n    console.error(\"Error in equalizeSize:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function stackHorizontally(event: Office.AddinCommands.Event) {\n  console.log(\"Stack Horizontally button clicked!\");\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the selected shapes\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected.\");\n        event.completed();\n        return;\n      }\n\n      // Load required properties (left, width, and top) for all selected shapes\n      selectedShapes.items.forEach((shape) => {\n        shape.load([\"left\", \"width\", \"top\"]);\n      });\n      await context.sync();\n\n      // Use the first shape's left coordinate as the starting point\n      let currentLeft = selectedShapes.items[0].left;\n      // Optionally, align all shapes vertically to the first shape's top coordinate\n      const commonTop = selectedShapes.items[0].top;\n\n      // Loop through each shape and reposition them in a row (end to end)\n      for (let i = 0; i < selectedShapes.items.length; i++) {\n        const shape = selectedShapes.items[i];\n        shape.left = currentLeft;\n        shape.top = commonTop;\n        currentLeft += shape.width;\n      }\n\n      await context.sync();\n      console.log(\"Selected shapes have been stacked horizontally.\");\n    });\n  } catch (error) {\n    console.error(\"Error in stackHorizontally:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function stackVertically(event: Office.AddinCommands.Event) {\n  console.log(\"Stack Vertically button clicked!\");\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the selected shapes\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected.\");\n        event.completed();\n        return;\n      }\n\n      // Load required properties (top, height, and left) for all selected shapes\n      selectedShapes.items.forEach((shape) => {\n        shape.load([\"top\", \"height\", \"left\"]);\n      });\n      await context.sync();\n\n      // Use the first shape's top coordinate as the starting point\n      let currentTop = selectedShapes.items[0].top;\n      // Optionally, align all shapes horizontally to the first shape's left coordinate\n      const commonLeft = selectedShapes.items[0].left;\n\n      // Loop through each shape and reposition them in a column (stacked vertically)\n      for (let i = 0; i < selectedShapes.items.length; i++) {\n        const shape = selectedShapes.items[i];\n        shape.top = currentTop;\n        shape.left = commonLeft;\n        currentTop += shape.height;\n      }\n\n      await context.sync();\n      console.log(\"Selected shapes have been stacked vertically.\");\n    });\n  } catch (error) {\n    console.error(\"Error in stackVertically:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function invertPositions(event: Office.AddinCommands.Event) {\n  console.log(\"Invert Positions button clicked!\");\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Get the selected shapes\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length !== 2) {\n        console.log(\"Please select exactly two shapes.\");\n        event.completed();\n        return;\n      }\n\n      // Retrieve the two shapes\n      const shape1 = selectedShapes.items[0];\n      const shape2 = selectedShapes.items[1];\n\n      // Load the current left and top values for both shapes\n      shape1.load([\"left\", \"top\"]);\n      shape2.load([\"left\", \"top\"]);\n      await context.sync();\n\n      // Store shape1's current position\n      const tempLeft = shape1.left;\n      const tempTop = shape1.top;\n\n      // Swap positions\n      shape1.left = shape2.left;\n      shape1.top = shape2.top;\n      shape2.left = tempLeft;\n      shape2.top = tempTop;\n\n      await context.sync();\n      console.log(\"The positions of the two shapes have been swapped.\");\n    });\n  } catch (error) {\n    console.error(\"Error in invertPositions:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function removeMargins(event: Office.AddinCommands.Event) {\n  console.log(\"Remove Margins button clicked!\");\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Get the selected shapes on the slide\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected.\");\n        event.completed();\n        return;\n      }\n\n      // Loop through each shape that has a textFrame and set its margins to 0\n      selectedShapes.items.forEach((shape) => {\n        if (shape.textFrame) {\n          // Assuming the textFrame object supports these margin properties.\n          shape.textFrame.leftMargin = 0;\n          shape.textFrame.rightMargin = 0;\n          shape.textFrame.topMargin = 0;\n          shape.textFrame.bottomMargin = 0;\n        }\n      });\n\n      await context.sync();\n      console.log(\"Margins removed from selected shapes.\");\n    });\n  } catch (error) {\n    console.error(\"Error in removeMargins:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function toggleTextWrap(event: Office.AddinCommands.Event) {\n  console.log(\"Toggle Text Wrap button clicked!\");\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Get the currently selected shapes on the slide\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected.\");\n        event.completed();\n        return;\n      }\n\n      // Load the current wordWrap property for each shape that has a text frame.\n      selectedShapes.items.forEach((shape) => {\n        if (shape.textFrame) {\n          shape.textFrame.load(\"wordWrap\");\n        }\n      });\n      await context.sync();\n\n      // Toggle the wordWrap property for each shape with a text frame.\n      selectedShapes.items.forEach((shape) => {\n        if (shape.textFrame) {\n          // Toggle the property: if currently true, set to false; if false, set to true.\n          shape.textFrame.wordWrap = !shape.textFrame.wordWrap;\n          console.log(`Text wrap set to: ${shape.textFrame.wordWrap}`);\n        }\n      });\n\n      await context.sync();\n      console.log(\"Toggled text wrap for selected shapes.\");\n    });\n  } catch (error) {\n    console.error(\"Error toggling text wrap:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function copyPosition(event: Office.AddinCommands.Event) {\n  console.log(\"Copy Position button clicked!\");\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Get the selected shapes on the slide.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected for copying position.\");\n        event.completed();\n        return;\n      }\n\n      // Use the first selected shape as reference.\n      const shape = selectedShapes.items[0];\n      shape.load([\"left\", \"top\"]);\n      await context.sync();\n\n      // Create a position object.\n      const pos = {\n        left: shape.left,\n        top: shape.top,\n      };\n\n      // Persist the copied position using OfficeRuntime.storage.\n      await OfficeRuntime.storage.setItem(\"copiedPosition\", JSON.stringify(pos));\n      console.log(`Position copied: left=${pos.left}, top=${pos.top}`);\n    });\n  } catch (error) {\n    console.error(\"Error in copyPosition:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function pastePosition(event: Office.AddinCommands.Event) {\n  console.log(\"Paste Position button clicked!\");\n\n  try {\n    // Retrieve the stored position using OfficeRuntime.storage.\n    const posStr = await OfficeRuntime.storage.getItem(\"copiedPosition\");\n    if (!posStr) {\n      console.log(\"No position has been copied yet.\");\n      event.completed();\n      return;\n    }\n    const copiedPosition = JSON.parse(posStr);\n\n    await PowerPoint.run(async (context) => {\n      // Get the selected shapes on the slide.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected for pasting position.\");\n        event.completed();\n        return;\n      }\n\n      // Use the first selected shape and apply the stored position.\n      const shape = selectedShapes.items[0];\n      shape.left = copiedPosition.left;\n      shape.top = copiedPosition.top;\n      console.log(`Pasted position: left=${copiedPosition.left}, top=${copiedPosition.top}`);\n\n      await context.sync();\n    });\n  } catch (error) {\n    console.error(\"Error in pastePosition:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function copyDimensions(event: Office.AddinCommands.Event) {\n  console.log(\"Copy Dimensions button clicked!\");\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Get the currently selected shapes on the slide.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected for copying dimensions.\");\n        event.completed();\n        return;\n      }\n\n      // Use the first selected shape as reference.\n      const shape = selectedShapes.items[0];\n      shape.load([\"width\", \"height\"]);\n      await context.sync();\n\n      // Create an object with the dimensions.\n      const dims = {\n        width: shape.width,\n        height: shape.height,\n      };\n\n      // Save the dimensions to OfficeRuntime.storage so that they persist.\n      await OfficeRuntime.storage.setItem(\"copiedDimensions\", JSON.stringify(dims));\n      console.log(`Dimensions copied: width=${dims.width}, height=${dims.height}`);\n    });\n  } catch (error) {\n    console.error(\"Error in copyDimensions:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function pasteDimensions(event: Office.AddinCommands.Event) {\n  console.log(\"Paste Dimensions button clicked!\");\n\n  try {\n    // Retrieve the stored dimensions using OfficeRuntime.storage.\n    const dimsStr = await OfficeRuntime.storage.getItem(\"copiedDimensions\");\n    if (!dimsStr) {\n      console.log(\"No dimensions have been copied yet.\");\n      event.completed();\n      return;\n    }\n    const copiedDimensions = JSON.parse(dimsStr);\n\n    await PowerPoint.run(async (context) => {\n      // Get the currently selected shapes on the slide.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected for pasting dimensions.\");\n        event.completed();\n        return;\n      }\n\n      // Use the first selected shape to apply the stored dimensions.\n      const shape = selectedShapes.items[0];\n      shape.width = copiedDimensions.width;\n      shape.height = copiedDimensions.height;\n      console.log(`Pasted dimensions: width=${copiedDimensions.width}, height=${copiedDimensions.height}`);\n\n      await context.sync();\n    });\n  } catch (error) {\n    console.error(\"Error in pasteDimensions:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function autoFitShapeToText(event: Office.AddinCommands.Event) {\n  console.log(\"Auto Fit Shape to Text button clicked!\");\n  try {\n    await PowerPoint.run(async (context) => {\n      // Get the currently selected shapes on the slide.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected.\");\n        event.completed();\n        return;\n      }\n\n      // Loop through each selected shape and set its textFrame.autoFit property.\n      selectedShapes.items.forEach((shape) => {\n        if (shape.textFrame) {\n          // Resize the shape to exactly fit the text.\n          shape.textFrame.autoSizeSetting = \"AutoSizeShapeToFitText\";\n          console.log(`ShapeToFitText set for shape with id: ${shape.id}`);\n        }\n      });\n\n      await context.sync();\n      console.log(\"Auto fit shape to text completed.\");\n    });\n  } catch (error) {\n    console.error(\"Error in autoFitShapeToText:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function autoFitTextToShape(event: Office.AddinCommands.Event) {\n  console.log(\"Auto Fit Text to Shape button clicked!\");\n  try {\n    await PowerPoint.run(async (context) => {\n      // Get the currently selected shapes on the slide.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      if (selectedShapes.items.length === 0) {\n        console.log(\"No shapes selected.\");\n        event.completed();\n        return;\n      }\n\n      // Loop through each selected shape and set its textFrame.autoFit property.\n      selectedShapes.items.forEach((shape) => {\n        if (shape.textFrame) {\n          // Adjust the text so that it fits within the shape (e.g. by shrinking text on overflow).\n          shape.textFrame.autoSizeSetting = \"AutoSizeTextToFitShape\";\n          console.log(`ShrinkTextOnOverflow set for shape with id: ${shape.id}`);\n        }\n      });\n\n      await context.sync();\n      console.log(\"Auto fit text to shape completed.\");\n    });\n  } catch (error) {\n    console.error(\"Error in autoFitTextToShape:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertHarvey0(event: Office.AddinCommands.Event) {\n  console.log(\"Insert Harvey Ball into selection button clicked!\");\n  const heavyCircle = \"⭘\"; // Harvey ball (Unicode U+2B58)\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected shapes.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      let inserted = false;\n\n      if (selectedShapes.items.length > 0) {\n        // First, try to update existing shapes that have a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          // Check if the shape has a text frame.\n          if (shape.textFrame) {\n            // Load the current text.\n            shape.textFrame.load(\"textRange/text\");\n          }\n        }\n        await context.sync();\n\n        // Append the heavy circle to each shape that has a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            let currentText = shape.textFrame.textRange.text;\n            // Append the heavy circle.\n            shape.textFrame.textRange.text = currentText + heavyCircle;\n            inserted = true;\n          }\n        }\n        await context.sync();\n      }\n\n      // If no shape was updated (or nothing was selected), create a new text box.\n      if (!inserted) {\n        // Retrieve the currently selected slides.\n        const selectedSlides = context.presentation.getSelectedSlides();\n        selectedSlides.load(\"items\");\n        await context.sync();\n\n        if (selectedSlides.items.length > 0) {\n          // Use the first selected slide.\n          const slide = selectedSlides.items[0];\n          // Create a new text box with the heavy circle.\n          const textShape = slide.shapes.addTextBox(heavyCircle);\n          // Optionally set the position for the new text box.\n          textShape.left = 100;\n          textShape.top = 100;\n          console.log(\"No suitable text frame found; created new text box with Harvey ball.\");\n        } else {\n          console.log(\"No slide available to insert the text box.\");\n        }\n      } else {\n        console.log(\"Harvey ball inserted into existing text selection.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error inserting Harvey ball:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertHarvey25(event: Office.AddinCommands.Event) {\n  console.log(\"Insert Havey25 button clicked!\");\n  const symbol = \"◔\"; // Circle with upper right quadrant black (Unicode U+25D4)\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected shapes.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      let inserted = false;\n\n      if (selectedShapes.items.length > 0) {\n        // Attempt to insert the symbol into shapes that have a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            // Load the current text.\n            shape.textFrame.load(\"textRange/text\");\n          }\n        }\n        await context.sync();\n\n        // Append the symbol to each shape with a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            const currentText = shape.textFrame.textRange.text || \"\";\n            shape.textFrame.textRange.text = currentText + symbol;\n            inserted = true;\n          }\n        }\n        await context.sync();\n      }\n\n      // If no shape was updated (or nothing was selected), create a new text box.\n      if (!inserted) {\n        // Retrieve the currently selected slides.\n        const selectedSlides = context.presentation.getSelectedSlides();\n        selectedSlides.load(\"items\");\n        await context.sync();\n\n        if (selectedSlides.items.length > 0) {\n          // Use the first selected slide.\n          const slide = selectedSlides.items[0];\n          // Create a new text box with the symbol.\n          const textShape = slide.shapes.addTextBox(symbol);\n          // Optionally, set the position for the new text box.\n          textShape.left = 100;\n          textShape.top = 100;\n          console.log(\"No suitable text frame found; created new text box with symbol.\");\n        } else {\n          console.log(\"No slide available to insert the text box.\");\n        }\n      } else {\n        console.log(\"Symbol inserted into existing text selection.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error inserting symbol:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertHarvey50r(event: Office.AddinCommands.Event) {\n  console.log(\"Insert Harvey50 button clicked!\");\n  const symbol = \"◑\"; // Circle with upper right quadrant black (Unicode U+25D4)\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected shapes.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      let inserted = false;\n\n      if (selectedShapes.items.length > 0) {\n        // Attempt to insert the symbol into shapes that have a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            // Load the current text.\n            shape.textFrame.load(\"textRange/text\");\n          }\n        }\n        await context.sync();\n\n        // Append the symbol to each shape with a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            const currentText = shape.textFrame.textRange.text || \"\";\n            shape.textFrame.textRange.text = currentText + symbol;\n            inserted = true;\n          }\n        }\n        await context.sync();\n      }\n\n      // If no shape was updated (or nothing was selected), create a new text box.\n      if (!inserted) {\n        // Retrieve the currently selected slides.\n        const selectedSlides = context.presentation.getSelectedSlides();\n        selectedSlides.load(\"items\");\n        await context.sync();\n\n        if (selectedSlides.items.length > 0) {\n          // Use the first selected slide.\n          const slide = selectedSlides.items[0];\n          // Create a new text box with the symbol.\n          const textShape = slide.shapes.addTextBox(symbol);\n          // Optionally, set the position for the new text box.\n          textShape.left = 100;\n          textShape.top = 100;\n          console.log(\"No suitable text frame found; created new text box with symbol.\");\n        } else {\n          console.log(\"No slide available to insert the text box.\");\n        }\n      } else {\n        console.log(\"Symbol inserted into existing text selection.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error inserting symbol:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertHarvey50l(event: Office.AddinCommands.Event) {\n  console.log(\"Insert Harvey50 button clicked!\");\n  const symbol = \"◐\"; // Circle with upper right quadrant black (Unicode U+25D4)\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected shapes.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      let inserted = false;\n\n      if (selectedShapes.items.length > 0) {\n        // Attempt to insert the symbol into shapes that have a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            // Load the current text.\n            shape.textFrame.load(\"textRange/text\");\n          }\n        }\n        await context.sync();\n\n        // Append the symbol to each shape with a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            const currentText = shape.textFrame.textRange.text || \"\";\n            shape.textFrame.textRange.text = currentText + symbol;\n            inserted = true;\n          }\n        }\n        await context.sync();\n      }\n\n      // If no shape was updated (or nothing was selected), create a new text box.\n      if (!inserted) {\n        // Retrieve the currently selected slides.\n        const selectedSlides = context.presentation.getSelectedSlides();\n        selectedSlides.load(\"items\");\n        await context.sync();\n\n        if (selectedSlides.items.length > 0) {\n          // Use the first selected slide.\n          const slide = selectedSlides.items[0];\n          // Create a new text box with the symbol.\n          const textShape = slide.shapes.addTextBox(symbol);\n          // Optionally, set the position for the new text box.\n          textShape.left = 100;\n          textShape.top = 100;\n          console.log(\"No suitable text frame found; created new text box with symbol.\");\n        } else {\n          console.log(\"No slide available to insert the text box.\");\n        }\n      } else {\n        console.log(\"Symbol inserted into existing text selection.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error inserting symbol:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertHarvey75(event: Office.AddinCommands.Event) {\n  console.log(\"Insert Harvey50 button clicked!\");\n  const symbol = \"◕\"; // Circle with upper right quadrant black (Unicode U+25D4)\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected shapes.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      let inserted = false;\n\n      if (selectedShapes.items.length > 0) {\n        // Attempt to insert the symbol into shapes that have a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            // Load the current text.\n            shape.textFrame.load(\"textRange/text\");\n          }\n        }\n        await context.sync();\n\n        // Append the symbol to each shape with a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            const currentText = shape.textFrame.textRange.text || \"\";\n            shape.textFrame.textRange.text = currentText + symbol;\n            inserted = true;\n          }\n        }\n        await context.sync();\n      }\n\n      // If no shape was updated (or nothing was selected), create a new text box.\n      if (!inserted) {\n        // Retrieve the currently selected slides.\n        const selectedSlides = context.presentation.getSelectedSlides();\n        selectedSlides.load(\"items\");\n        await context.sync();\n\n        if (selectedSlides.items.length > 0) {\n          // Use the first selected slide.\n          const slide = selectedSlides.items[0];\n          // Create a new text box with the symbol.\n          const textShape = slide.shapes.addTextBox(symbol);\n          // Optionally, set the position for the new text box.\n          textShape.left = 100;\n          textShape.top = 100;\n          console.log(\"No suitable text frame found; created new text box with symbol.\");\n        } else {\n          console.log(\"No slide available to insert the text box.\");\n        }\n      } else {\n        console.log(\"Symbol inserted into existing text selection.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error inserting symbol:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertHarvey100(event: Office.AddinCommands.Event) {\n  console.log(\"Insert Harvey50 button clicked!\");\n  const symbol = \"⬤\"; // Circle with upper right quadrant black (Unicode U+25D4)\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected shapes.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      let inserted = false;\n\n      if (selectedShapes.items.length > 0) {\n        // Attempt to insert the symbol into shapes that have a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            // Load the current text.\n            shape.textFrame.load(\"textRange/text\");\n          }\n        }\n        await context.sync();\n\n        // Append the symbol to each shape with a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            const currentText = shape.textFrame.textRange.text || \"\";\n            shape.textFrame.textRange.text = currentText + symbol;\n            inserted = true;\n          }\n        }\n        await context.sync();\n      }\n\n      // If no shape was updated (or nothing was selected), create a new text box.\n      if (!inserted) {\n        // Retrieve the currently selected slides.\n        const selectedSlides = context.presentation.getSelectedSlides();\n        selectedSlides.load(\"items\");\n        await context.sync();\n\n        if (selectedSlides.items.length > 0) {\n          // Use the first selected slide.\n          const slide = selectedSlides.items[0];\n          // Create a new text box with the symbol.\n          const textShape = slide.shapes.addTextBox(symbol);\n          // Optionally, set the position for the new text box.\n          textShape.left = 100;\n          textShape.top = 100;\n          console.log(\"No suitable text frame found; created new text box with symbol.\");\n        } else {\n          console.log(\"No slide available to insert the text box.\");\n        }\n      } else {\n        console.log(\"Symbol inserted into existing text selection.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error inserting symbol:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertGreenLight(event: Office.AddinCommands.Event) {\n  console.log(\"Insert Harvey50 button clicked!\");\n  const symbol = \"🟢\"; // Circle with upper right quadrant black (Unicode U+25D4)\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected shapes.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      let inserted = false;\n\n      if (selectedShapes.items.length > 0) {\n        // Attempt to insert the symbol into shapes that have a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            // Load the current text.\n            shape.textFrame.load(\"textRange/text\");\n          }\n        }\n        await context.sync();\n\n        // Append the symbol to each shape with a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            const currentText = shape.textFrame.textRange.text || \"\";\n            shape.textFrame.textRange.text = currentText + symbol;\n            inserted = true;\n          }\n        }\n        await context.sync();\n      }\n\n      // If no shape was updated (or nothing was selected), create a new text box.\n      if (!inserted) {\n        // Retrieve the currently selected slides.\n        const selectedSlides = context.presentation.getSelectedSlides();\n        selectedSlides.load(\"items\");\n        await context.sync();\n\n        if (selectedSlides.items.length > 0) {\n          // Use the first selected slide.\n          const slide = selectedSlides.items[0];\n          // Create a new text box with the symbol.\n          const textShape = slide.shapes.addTextBox(symbol);\n          // Optionally, set the position for the new text box.\n          textShape.left = 100;\n          textShape.top = 100;\n          console.log(\"No suitable text frame found; created new text box with symbol.\");\n        } else {\n          console.log(\"No slide available to insert the text box.\");\n        }\n      } else {\n        console.log(\"Symbol inserted into existing text selection.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error inserting symbol:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertOrangeLight(event: Office.AddinCommands.Event) {\n  console.log(\"Insert Harvey50 button clicked!\");\n  const symbol = \"🟠\"; // Circle with upper right quadrant black (Unicode U+25D4)\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected shapes.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      let inserted = false;\n\n      if (selectedShapes.items.length > 0) {\n        // Attempt to insert the symbol into shapes that have a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            // Load the current text.\n            shape.textFrame.load(\"textRange/text\");\n          }\n        }\n        await context.sync();\n\n        // Append the symbol to each shape with a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            const currentText = shape.textFrame.textRange.text || \"\";\n            shape.textFrame.textRange.text = currentText + symbol;\n            inserted = true;\n          }\n        }\n        await context.sync();\n      }\n\n      // If no shape was updated (or nothing was selected), create a new text box.\n      if (!inserted) {\n        // Retrieve the currently selected slides.\n        const selectedSlides = context.presentation.getSelectedSlides();\n        selectedSlides.load(\"items\");\n        await context.sync();\n\n        if (selectedSlides.items.length > 0) {\n          // Use the first selected slide.\n          const slide = selectedSlides.items[0];\n          // Create a new text box with the symbol.\n          const textShape = slide.shapes.addTextBox(symbol);\n          // Optionally, set the position for the new text box.\n          textShape.left = 100;\n          textShape.top = 100;\n          console.log(\"No suitable text frame found; created new text box with symbol.\");\n        } else {\n          console.log(\"No slide available to insert the text box.\");\n        }\n      } else {\n        console.log(\"Symbol inserted into existing text selection.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error inserting symbol:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertRedLight(event: Office.AddinCommands.Event) {\n  console.log(\"Insert Harvey50 button clicked!\");\n  const symbol = \"🔴\"; // Circle with upper right quadrant black (Unicode U+25D4)\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected shapes.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      let inserted = false;\n\n      if (selectedShapes.items.length > 0) {\n        // Attempt to insert the symbol into shapes that have a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            // Load the current text.\n            shape.textFrame.load(\"textRange/text\");\n          }\n        }\n        await context.sync();\n\n        // Append the symbol to each shape with a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            const currentText = shape.textFrame.textRange.text || \"\";\n            shape.textFrame.textRange.text = currentText + symbol;\n            inserted = true;\n          }\n        }\n        await context.sync();\n      }\n\n      // If no shape was updated (or nothing was selected), create a new text box.\n      if (!inserted) {\n        // Retrieve the currently selected slides.\n        const selectedSlides = context.presentation.getSelectedSlides();\n        selectedSlides.load(\"items\");\n        await context.sync();\n\n        if (selectedSlides.items.length > 0) {\n          // Use the first selected slide.\n          const slide = selectedSlides.items[0];\n          // Create a new text box with the symbol.\n          const textShape = slide.shapes.addTextBox(symbol);\n          // Optionally, set the position for the new text box.\n          textShape.left = 100;\n          textShape.top = 100;\n          console.log(\"No suitable text frame found; created new text box with symbol.\");\n        } else {\n          console.log(\"No slide available to insert the text box.\");\n        }\n      } else {\n        console.log(\"Symbol inserted into existing text selection.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error inserting symbol:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertUpArrow(event: Office.AddinCommands.Event) {\n  console.log(\"Insert Harvey50 button clicked!\");\n  const symbol = \"↑\"; // Circle with upper right quadrant black (Unicode U+25D4)\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected shapes.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      let inserted = false;\n\n      if (selectedShapes.items.length > 0) {\n        // Attempt to insert the symbol into shapes that have a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            // Load the current text.\n            shape.textFrame.load(\"textRange/text\");\n          }\n        }\n        await context.sync();\n\n        // Append the symbol to each shape with a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            const currentText = shape.textFrame.textRange.text || \"\";\n            shape.textFrame.textRange.text = currentText + symbol;\n            inserted = true;\n          }\n        }\n        await context.sync();\n      }\n\n      // If no shape was updated (or nothing was selected), create a new text box.\n      if (!inserted) {\n        // Retrieve the currently selected slides.\n        const selectedSlides = context.presentation.getSelectedSlides();\n        selectedSlides.load(\"items\");\n        await context.sync();\n\n        if (selectedSlides.items.length > 0) {\n          // Use the first selected slide.\n          const slide = selectedSlides.items[0];\n          // Create a new text box with the symbol.\n          const textShape = slide.shapes.addTextBox(symbol);\n          // Optionally, set the position for the new text box.\n          textShape.left = 100;\n          textShape.top = 100;\n          console.log(\"No suitable text frame found; created new text box with symbol.\");\n        } else {\n          console.log(\"No slide available to insert the text box.\");\n        }\n      } else {\n        console.log(\"Symbol inserted into existing text selection.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error inserting symbol:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertDownArrow(event: Office.AddinCommands.Event) {\n  console.log(\"Insert Harvey50 button clicked!\");\n  const symbol = \"↓\"; // Circle with upper right quadrant black (Unicode U+25D4)\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected shapes.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      let inserted = false;\n\n      if (selectedShapes.items.length > 0) {\n        // Attempt to insert the symbol into shapes that have a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            // Load the current text.\n            shape.textFrame.load(\"textRange/text\");\n          }\n        }\n        await context.sync();\n\n        // Append the symbol to each shape with a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            const currentText = shape.textFrame.textRange.text || \"\";\n            shape.textFrame.textRange.text = currentText + symbol;\n            inserted = true;\n          }\n        }\n        await context.sync();\n      }\n\n      // If no shape was updated (or nothing was selected), create a new text box.\n      if (!inserted) {\n        // Retrieve the currently selected slides.\n        const selectedSlides = context.presentation.getSelectedSlides();\n        selectedSlides.load(\"items\");\n        await context.sync();\n\n        if (selectedSlides.items.length > 0) {\n          // Use the first selected slide.\n          const slide = selectedSlides.items[0];\n          // Create a new text box with the symbol.\n          const textShape = slide.shapes.addTextBox(symbol);\n          // Optionally, set the position for the new text box.\n          textShape.left = 100;\n          textShape.top = 100;\n          console.log(\"No suitable text frame found; created new text box with symbol.\");\n        } else {\n          console.log(\"No slide available to insert the text box.\");\n        }\n      } else {\n        console.log(\"Symbol inserted into existing text selection.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error inserting symbol:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertEqualsSign(event: Office.AddinCommands.Event) {\n  console.log(\"Insert Harvey50 button clicked!\");\n  const symbol = \"＝\"; // Circle with upper right quadrant black (Unicode U+25D4)\n\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected shapes.\n      const selectedShapes = context.presentation.getSelectedShapes();\n      selectedShapes.load(\"items\");\n      await context.sync();\n\n      let inserted = false;\n\n      if (selectedShapes.items.length > 0) {\n        // Attempt to insert the symbol into shapes that have a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            // Load the current text.\n            shape.textFrame.load(\"textRange/text\");\n          }\n        }\n        await context.sync();\n\n        // Append the symbol to each shape with a text frame.\n        for (let i = 0; i < selectedShapes.items.length; i++) {\n          const shape = selectedShapes.items[i];\n          if (shape.textFrame) {\n            const currentText = shape.textFrame.textRange.text || \"\";\n            shape.textFrame.textRange.text = currentText + symbol;\n            inserted = true;\n          }\n        }\n        await context.sync();\n      }\n\n      // If no shape was updated (or nothing was selected), create a new text box.\n      if (!inserted) {\n        // Retrieve the currently selected slides.\n        const selectedSlides = context.presentation.getSelectedSlides();\n        selectedSlides.load(\"items\");\n        await context.sync();\n\n        if (selectedSlides.items.length > 0) {\n          // Use the first selected slide.\n          const slide = selectedSlides.items[0];\n          // Create a new text box with the symbol.\n          const textShape = slide.shapes.addTextBox(symbol);\n          // Optionally, set the position for the new text box.\n          textShape.left = 100;\n          textShape.top = 100;\n          console.log(\"No suitable text frame found; created new text box with symbol.\");\n        } else {\n          console.log(\"No slide available to insert the text box.\");\n        }\n      } else {\n        console.log(\"Symbol inserted into existing text selection.\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error inserting symbol:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function createPostItNote(event: Office.AddinCommands.Event) {\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected slides.\n      const slides = context.presentation.getSelectedSlides();\n      slides.load(\"items\");\n      await context.sync();\n\n      if (slides.items.length === 0) {\n        console.log(\"No slide selected. Please select a slide.\");\n        event.completed();\n        return;\n      }\n\n      // Use the first selected slide.\n      const slide = slides.items[0];\n\n      // Assume default slide dimensions (in points). Here, slideWidth is 960 and slideHeight is 540.\n      const slideWidth = 960;\n      const slideHeight = 540;\n\n      // Define the desired note dimensions.\n      const noteWidth = 250;\n      const noteHeight = 250;\n\n      // Calculate positions to center the square horizontally and vertically.\n      const noteLeft = (slideWidth - noteWidth) / 2;\n      const noteTop = (slideHeight - noteHeight) / 2;\n\n      // Create a geometric shape (a rectangle) for the post-it note.\n      const postIt = slide.shapes.addGeometricShape(\"Rectangle\");\n      await context.sync();\n\n      // Set the dimensions and position of the post-it note.\n      postIt.width = noteWidth;\n      postIt.height = noteHeight;\n      postIt.left = noteLeft;\n      postIt.top = noteTop;\n\n      // Set the fill color to #E6BD01.\n      postIt.fill.setSolidColor(\"#E6BD01\");\n\n      // Set the text inside the shape to be black.\n      postIt.textFrame.textRange.font.color = \"black\";\n\n      // Optionally, hide the border.\n      postIt.lineFormat.visible = false;\n\n      await context.sync();\n      console.log(\"Post-it note square created and centered on the slide.\");\n    });\n  } catch (error) {\n    console.error(\"Error creating post-it note square:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function insertFootnote(event: Office.AddinCommands.Event) {\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected slides.\n      const slides = context.presentation.getSelectedSlides();\n      slides.load(\"items\");\n      await context.sync();\n\n      if (slides.items.length === 0) {\n        console.log(\"No slide selected. Please select a slide.\");\n        event.completed();\n        return;\n      }\n      \n      // Use the first selected slide.\n      const slide = slides.items[0];\n\n      // Load the presentation's slide dimensions.\n      context.presentation.load([\"slideWidth\", \"slideHeight\"]);\n      await context.sync();\n\n      // Use actual slide dimensions if available, otherwise default values.\n      const slideWidth = context.presentation.slideWidth || 960;\n      const slideHeight = context.presentation.slideHeight || 540;\n\n      // Define the desired text box dimensions.\n      const boxWidth = 300;\n      const boxHeight = 30;\n      // Set margins: 20 points from the left, 20 points from the bottom.\n      const left = 20;\n      const top = slideHeight - boxHeight - 20;\n\n      // Create a text box with the default footnote text.\n      const footnoteShape = slide.shapes.addTextBox(\"Footnote text\");\n      await context.sync();\n\n      // Set its size and position.\n      footnoteShape.width = boxWidth;\n      footnoteShape.height = boxHeight;\n      footnoteShape.left = left;\n      footnoteShape.top = top;\n\n      // Format the text: set font size to 10 and italicize it.\n      footnoteShape.textFrame.textRange.font.size = 10;\n      footnoteShape.textFrame.textRange.font.italic = true;\n      // Optionally, set the text color to black.\n      footnoteShape.textFrame.textRange.font.color = \"black\";\n\n      await context.sync();\n      console.log(\"Footnote inserted on the bottom left of the slide.\");\n    });\n  } catch (error) {\n    console.error(\"Error inserting footnote:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function createPreliminaryStamp(event: Office.AddinCommands.Event) {\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected slides.\n      const slides = context.presentation.getSelectedSlides();\n      slides.load(\"items\");\n      await context.sync();\n\n      if (slides.items.length === 0) {\n        console.log(\"No slide selected. Please select a slide.\");\n        event.completed();\n        return;\n      }\n      // Use the first selected slide.\n      const slide = slides.items[0];\n\n      // Load the presentation's slide dimensions.\n      context.presentation.load([\"slideWidth\", \"slideHeight\"]);\n      await context.sync();\n      const slideWidth = context.presentation.slideWidth || 960;\n      const slideHeight = context.presentation.slideHeight || 540;\n\n      // Define the stamp dimensions.\n      const stampWidth = 120;\n      const stampHeight = 50;\n      const margin = 20;\n\n      // Calculate the stamp's position in the top right corner.\n      const stampLeft = slideWidth - stampWidth - margin;\n      const stampTop = margin;\n\n      // Create a geometric shape (rectangle) for the stamp.\n      const stamp = slide.shapes.addGeometricShape(\"Rectangle\");\n      await context.sync();\n\n      // Set the stamp's dimensions and position.\n      stamp.width = stampWidth;\n      stamp.height = stampHeight;\n      stamp.left = stampLeft;\n      stamp.top = stampTop;\n\n      // Set the fill color to black.\n      stamp.fill.setSolidColor(\"black\");\n\n      // Insert the text \"PRELIMINARY\" into the stamp.\n      stamp.textFrame.textRange.text = \"PRELIMINARY\";\n      // Format the text: white color, bold, and a font size of 16.\n      stamp.textFrame.textRange.font.color = \"white\";\n      stamp.textFrame.textRange.font.bold = true;\n      stamp.textFrame.textRange.font.size = 16;\n      stamp.textFrame.textRange.paragraphFormat.horizontalAlignment = \"Center\";\n      stamp.lineFormat.visible = false;\n\n      \n      // Set autoFit so the shape resizes to fit the text.\n      stamp.textFrame.autoSizeSetting = \"AutoSizeShapeToFitText\";\n\n      await context.sync();\n      console.log(\"Preliminary stamp created in the top right corner of the slide.\");\n    });\n  } catch (error) {\n    console.error(\"Error creating preliminary stamp:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function createExampleStamp(event: Office.AddinCommands.Event) {\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected slides.\n      const slides = context.presentation.getSelectedSlides();\n      slides.load(\"items\");\n      await context.sync();\n\n      if (slides.items.length === 0) {\n        console.log(\"No slide selected. Please select a slide.\");\n        event.completed();\n        return;\n      }\n      // Use the first selected slide.\n      const slide = slides.items[0];\n\n      // Load the presentation's slide dimensions.\n      context.presentation.load([\"slideWidth\", \"slideHeight\"]);\n      await context.sync();\n      const slideWidth = context.presentation.slideWidth || 960;\n      const slideHeight = context.presentation.slideHeight || 540;\n\n      // Define the stamp dimensions.\n      const stampWidth = 120;\n      const stampHeight = 50;\n      const margin = 20;\n\n      // Calculate the stamp's position in the top right corner.\n      const stampLeft = slideWidth - stampWidth - margin;\n      const stampTop = margin;\n\n      // Create a geometric shape (rectangle) for the stamp.\n      const stamp = slide.shapes.addGeometricShape(\"Rectangle\");\n      await context.sync();\n\n      // Set the stamp's dimensions and position.\n      stamp.width = stampWidth;\n      stamp.height = stampHeight;\n      stamp.left = stampLeft;\n      stamp.top = stampTop;\n\n      // Set the fill color to black.\n      stamp.fill.setSolidColor(\"green\");\n\n      // Insert the text \"PRELIMINARY\" into the stamp.\n      stamp.textFrame.textRange.text = \"EXAMPLE\";\n      // Format the text: white color, bold, and a font size of 16.\n      stamp.textFrame.textRange.font.color = \"white\";\n      stamp.textFrame.textRange.font.bold = true;\n      stamp.textFrame.textRange.font.size = 16;\n      stamp.textFrame.textRange.paragraphFormat.horizontalAlignment = \"Center\";\n      stamp.lineFormat.visible = false;\n\n      \n      // Set autoFit so the shape resizes to fit the text.\n      stamp.textFrame.autoSizeSetting = \"AutoSizeShapeToFitText\";\n\n      await context.sync();\n      console.log(\"Preliminary stamp created in the top right corner of the slide.\");\n    });\n  } catch (error) {\n    console.error(\"Error creating preliminary stamp:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function createExecSumStamp(event: Office.AddinCommands.Event) {\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected slides.\n      const slides = context.presentation.getSelectedSlides();\n      slides.load(\"items\");\n      await context.sync();\n\n      if (slides.items.length === 0) {\n        console.log(\"No slide selected. Please select a slide.\");\n        event.completed();\n        return;\n      }\n      // Use the first selected slide.\n      const slide = slides.items[0];\n\n      // Load the presentation's slide dimensions.\n      context.presentation.load([\"slideWidth\", \"slideHeight\"]);\n      await context.sync();\n      const slideWidth = context.presentation.slideWidth || 960;\n      const slideHeight = context.presentation.slideHeight || 540;\n\n      // Define the stamp dimensions.\n      const stampWidth = 120;\n      const stampHeight = 50;\n      const margin = 20;\n\n      // Calculate the stamp's position in the top right corner.\n      const stampLeft = slideWidth - stampWidth - margin;\n      const stampTop = margin;\n\n      // Create a geometric shape (rectangle) for the stamp.\n      const stamp = slide.shapes.addGeometricShape(\"Rectangle\");\n      await context.sync();\n\n      // Set the stamp's dimensions and position.\n      stamp.width = stampWidth;\n      stamp.height = stampHeight;\n      stamp.left = stampLeft;\n      stamp.top = stampTop;\n\n      // Set the fill color to black.\n      stamp.fill.setSolidColor(\"red\");\n\n      // Insert the text \"PRELIMINARY\" into the stamp.\n      stamp.textFrame.textRange.text = \"EXECUTIVE SUMMARY\";\n      // Format the text: white color, bold, and a font size of 16.\n      stamp.textFrame.textRange.font.color = \"white\";\n      stamp.textFrame.textRange.font.bold = true;\n      stamp.textFrame.textRange.font.size = 16;\n      stamp.textFrame.textRange.paragraphFormat.horizontalAlignment = \"Center\";\n      stamp.lineFormat.visible = false;\n\n      \n      // Set autoFit so the shape resizes to fit the text.\n      stamp.textFrame.autoSizeSetting = \"AutoSizeShapeToFitText\";\n\n      await context.sync();\n      console.log(\"Preliminary stamp created in the top right corner of the slide.\");\n    });\n  } catch (error) {\n    console.error(\"Error creating preliminary stamp:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\nexport async function createDraftStamp(event: Office.AddinCommands.Event) {\n  try {\n    await PowerPoint.run(async (context) => {\n      // Retrieve the currently selected slides.\n      const slides = context.presentation.getSelectedSlides();\n      slides.load(\"items\");\n      await context.sync();\n\n      if (slides.items.length === 0) {\n        console.log(\"No slide selected. Please select a slide.\");\n        event.completed();\n        return;\n      }\n      // Use the first selected slide.\n      const slide = slides.items[0];\n\n      // Load the presentation's slide dimensions.\n      context.presentation.load([\"slideWidth\", \"slideHeight\"]);\n      await context.sync();\n      const slideWidth = context.presentation.slideWidth || 960;\n      const slideHeight = context.presentation.slideHeight || 540;\n\n      // Define the stamp dimensions.\n      const stampWidth = 80;\n      const stampHeight = 50;\n      const margin = 20;\n\n      // Calculate the stamp's position in the top right corner.\n      const stampLeft = slideWidth - stampWidth - margin;\n      const stampTop = margin;\n\n      // Create a geometric shape (rectangle) for the stamp.\n      const stamp = slide.shapes.addGeometricShape(\"Rectangle\");\n      await context.sync();\n\n      // Set the stamp's dimensions and position.\n      stamp.width = stampWidth;\n      stamp.height = stampHeight;\n      stamp.left = stampLeft;\n      stamp.top = stampTop;\n\n      // Set the fill color to black.\n      stamp.fill.setSolidColor(\"CCA801\");\n\n      // Insert the text \"PRELIMINARY\" into the stamp.\n      stamp.textFrame.textRange.text = \"DRAFT\";\n      // Format the text: white color, bold, and a font size of 16.\n      stamp.textFrame.textRange.font.color = \"white\";\n      stamp.textFrame.textRange.font.bold = true;\n      stamp.textFrame.textRange.font.size = 16;\n      stamp.textFrame.textRange.paragraphFormat.horizontalAlignment = \"Center\";\n      stamp.lineFormat.visible = false;\n\n      \n      // Set autoFit so the shape resizes to fit the text.\n      stamp.textFrame.autoSizeSetting = \"AutoSizeShapeToFitText\";\n\n      await context.sync();\n      console.log(\"Preliminary stamp created in the top right corner of the slide.\");\n    });\n  } catch (error) {\n    console.error(\"Error creating preliminary stamp:\", error);\n  } finally {\n    event.completed();\n  }\n}\n\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }"],"names":["__webpack_require__","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","emptyTextBoxes","_x","_emptyTextBoxes","_callee2","event","_context2","console","log","PowerPoint","run","_ref","_callee","context","selectedShapes","_context","presentation","getSelectedShapes","load","sync","items","completed","shape","textFrame","hasText","concat","textRange","text","_x35","t0","error","emptyEntireSlide","_x2","_emptyEntireSlide","_callee4","_context4","_ref2","_callee3","selectedSlides","slide","shapes","_context3","getSelectedSlides","_x36","equalizeSize","_x3","_equalizeSize","_callee6","_context6","_ref3","_callee5","referenceShape","refWidth","refHeight","_context5","width","height","_x37","equalizeHeight","_x4","_equalizeHeight","_callee8","_context8","_ref4","_callee7","_context7","_x38","equalizeWidth","_x5","_equalizeWidth","_callee10","_context10","_ref5","_callee9","_context9","_x39","stackHorizontally","_x6","_stackHorizontally","_callee12","_context12","_ref6","_callee11","currentLeft","commonTop","_context11","left","top","_x40","stackVertically","_x7","_stackVertically","_callee14","_context14","_ref7","_callee13","currentTop","commonLeft","_context13","_x41","invertPositions","_x8","_invertPositions","_callee16","_context16","_ref8","_callee15","shape1","shape2","tempLeft","tempTop","_context15","_x42","removeMargins","_x9","_removeMargins","_callee18","_context18","_ref9","_callee17","_context17","leftMargin","rightMargin","topMargin","bottomMargin","_x43","toggleTextWrap","_x10","_toggleTextWrap","_callee20","_context20","_ref10","_callee19","_context19","wordWrap","_x44","copyPosition","_x11","_copyPosition","_callee22","_context22","_ref11","_callee21","pos","_context21","OfficeRuntime","storage","setItem","JSON","stringify","_x45","pastePosition","_x12","_pastePosition","_callee24","posStr","copiedPosition","_context24","getItem","parse","_ref12","_callee23","_context23","_x46","copyDimensions","_x13","_copyDimensions","_callee26","_context26","_ref13","_callee25","dims","_context25","_x47","pasteDimensions","_x14","_pasteDimensions","_callee28","dimsStr","copiedDimensions","_context28","_ref14","_callee27","_context27","_x48","autoFitShapeToText","_x15","_autoFitShapeToText","_callee30","_context30","_ref15","_callee29","_context29","autoSizeSetting","id","_x49","autoFitTextToShape","_x16","_autoFitTextToShape","_callee32","_context32","_ref16","_callee31","_context31","_x50","insertHarvey0","_x17","_insertHarvey","_callee34","_context34","_ref17","_callee33","inserted","_i","_shape","currentText","textShape","_context33","addTextBox","_x51","insertHarvey25","_x18","_insertHarvey2","_callee36","_context36","_ref18","_callee35","_i2","_shape2","_context35","_x52","insertHarvey50r","_x19","_insertHarvey50r","_callee38","_context38","_ref19","_callee37","_i3","_shape3","_context37","_x53","insertHarvey50l","_x20","_insertHarvey50l","_callee40","_context40","_ref20","_callee39","_i4","_shape4","_context39","_x54","insertHarvey75","_x21","_insertHarvey3","_callee42","_context42","_ref21","_callee41","_i5","_shape5","_context41","_x55","insertHarvey100","_x22","_insertHarvey4","_callee44","_context44","_ref22","_callee43","_i6","_shape6","_context43","_x56","insertGreenLight","_x23","_insertGreenLight","_callee46","_context46","_ref23","_callee45","_i7","_shape7","_context45","_x57","insertOrangeLight","_x24","_insertOrangeLight","_callee48","_context48","_ref24","_callee47","_i8","_shape8","_context47","_x58","insertRedLight","_x25","_insertRedLight","_callee50","_context50","_ref25","_callee49","_i9","_shape9","_context49","_x59","insertUpArrow","_x26","_insertUpArrow","_callee52","_context52","_ref26","_callee51","_i10","_shape10","_context51","_x60","insertDownArrow","_x27","_insertDownArrow","_callee54","_context54","_ref27","_callee53","_i11","_shape11","_context53","_x61","insertEqualsSign","_x28","_insertEqualsSign","_callee56","_context56","_ref28","_callee55","_i12","_shape12","_context55","_x62","createPostItNote","_x29","_createPostItNote","_callee58","_context58","_ref29","_callee57","slides","noteWidth","noteHeight","noteLeft","noteTop","postIt","_context57","addGeometricShape","fill","setSolidColor","font","color","lineFormat","visible","_x63","insertFootnote","_x30","_insertFootnote","_callee60","_context60","_ref30","_callee59","slideHeight","boxWidth","boxHeight","footnoteShape","_context59","slideWidth","size","italic","_x64","createPreliminaryStamp","_x31","_createPreliminaryStamp","_callee62","_context62","_ref31","_callee61","stampWidth","stampHeight","stampLeft","stampTop","stamp","_context61","bold","paragraphFormat","horizontalAlignment","_x65","createExampleStamp","_x32","_createExampleStamp","_callee64","_context64","_ref32","_callee63","_context63","_x66","createExecSumStamp","_x33","_createExecSumStamp","_callee66","_context66","_ref33","_callee65","_context65","_x67","createDraftStamp","_x34","_createDraftStamp","_callee68","_context68","_ref34","_callee67","_context67","_x68","exports","definition","key","get","obj","prop","Office","onReady","actions","associate"],"sourceRoot":""}